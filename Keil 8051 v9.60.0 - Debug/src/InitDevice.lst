C51 COMPILER V9.60.0.0   INITDEVICE                                                        10/21/2024 19:09:10 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE INITDEVICE
OBJECT MODULE PLACED IN .\src\InitDevice.OBJ
COMPILER INVOKED BY: C:\SiliconLabs\SimplicityStudio\v5\developer\toolchains\keil_8051\9.60\BIN\C51.exe C:\Users\Yoshida
                    -_Lab\SimplicityStudio\v5_workspace\LED\src\InitDevice.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFU
                    -ZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\Yoshida_Lab\SimplicityStudio\v5_wo
                    -rkspace\LED\inc;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.3.1//Device/shared/si8051Base;C:/SiliconLabs/S
                    -implicityStudio/v5/developer/sdks/8051/v4.3.1//Device/EFM8SB1/inc) PRINT(.\src\InitDevice.lst) COND PAGEWIDTH(120) PAGEL
                    -ENGTH(65) OBJECT(.\src\InitDevice.OBJ)

line level    source

   1          //=========================================================
   2          // src/InitDevice.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!
   7          //=========================================================
   8          
   9          // USER INCLUDES
  10          #include <SI_EFM8SB1_Register_Enums.h>
  11          #include "InitDevice.h"
  12          
  13          // USER PROTOTYPES
  14          // USER FUNCTIONS
  15          
  16          // $[Library Includes]
  17          // [Library Includes]$
  18          
  19          //==============================================================================
  20          // enter_DefaultMode_from_RESET
  21          //==============================================================================
  22          extern void enter_DefaultMode_from_RESET(void) {
  23   1              // $[Config Calls]
  24   1              // Save the SFRPAGE
  25   1              uint8_t SFRPAGE_save = SFRPAGE;
  26   1              PCA_0_enter_DefaultMode_from_RESET();
  27   1              VREG_0_enter_DefaultMode_from_RESET();
  28   1              HFOSC_0_enter_DefaultMode_from_RESET();
  29   1              CLOCK_0_enter_DefaultMode_from_RESET();
  30   1              // Restore the SFRPAGE
  31   1              SFRPAGE = SFRPAGE_save;
  32   1      
  33   1              // [Config Calls]$
  34   1      
  35   1      
  36   1      }
  37          
  38          
  39          //================================================================================
  40          // PCA_0_enter_DefaultMode_from_RESET
  41          //================================================================================
  42          extern void PCA_0_enter_DefaultMode_from_RESET(void) {
  43   1              // $[PCA0MD - PCA Mode]
  44   1              /*
  45   1              // WDTE (Watchdog Timer Enable) = DISABLED (Disable Watchdog Timer.)
  46   1              // CPS (PCA Counter/Timer Pulse Select) = SYSCLK_DIV_12 (System clock
  47   1              //     divided by 12.)
  48   1              // CIDL (PCA Counter/Timer Idle Control) = NORMAL (PCA continues to
  49   1              //     function normally while the system controller is in Idle Mode.)
  50   1              // ECF (PCA Counter/Timer Overflow Interrupt Enable) = OVF_INT_DISABLED
  51   1              //     (Disable the CF interrupt.)
C51 COMPILER V9.60.0.0   INITDEVICE                                                        10/21/2024 19:09:10 PAGE 2   

  52   1              // WDTE (Watchdog Timer Enable) = DISABLED (Disable Watchdog Timer.)
  53   1              // WDLCK (Watchdog Timer Lock) = UNLOCKED (Watchdog Timer Enable
  54   1              //     unlocked.)
  55   1              */
  56   1              SFRPAGE = 0x00;
  57   1              PCA0MD &= ~PCA0MD_WDTE__BMASK;
  58   1              PCA0MD = PCA0MD_CPS__SYSCLK_DIV_12 | PCA0MD_CIDL__NORMAL | PCA0MD_ECF__OVF_INT_DISABLED
  59   1                       | PCA0MD_WDTE__DISABLED | PCA0MD_WDLCK__UNLOCKED;
  60   1              // [PCA0MD - PCA Mode]$
  61   1      
  62   1              // $[PCA0H - PCA Counter/Timer High Byte]
  63   1              // [PCA0H - PCA Counter/Timer High Byte]$
  64   1      
  65   1              // $[PCA0L - PCA Counter/Timer Low Byte]
  66   1              // [PCA0L - PCA Counter/Timer Low Byte]$
  67   1      
  68   1              // $[PCA0PWM - PCA PWM Configuration]
  69   1              // [PCA0PWM - PCA PWM Configuration]$
  70   1      
  71   1              // $[PCA0CN0 - PCA Control 0]
  72   1              // [PCA0CN0 - PCA Control 0]$
  73   1      
  74   1      
  75   1      }
  76          
  77          //================================================================================
  78          // VREG_0_enter_DefaultMode_from_RESET
  79          //================================================================================
  80          extern void VREG_0_enter_DefaultMode_from_RESET(void) {
  81   1              // $[REG0CN - Voltage Regulator Control]
  82   1              /*
  83   1              // OSCBIAS (High Frequency Oscillator Bias) = ENABLED (Enable the
  84   1              //     precision High Frequency Oscillator bias.)
  85   1              */
  86   1              REG0CN = REG0CN_OSCBIAS__ENABLED;
  87   1              // [REG0CN - Voltage Regulator Control]$
  88   1      
  89   1      
  90   1      }
  91          
  92          //================================================================================
  93          // HFOSC_0_enter_DefaultMode_from_RESET
  94          //================================================================================
  95          extern void HFOSC_0_enter_DefaultMode_from_RESET(void) {
  96   1              // $[HFO#CAL - High Frequency Oscillator Calibration]
  97   1              // [HFO#CAL - High Frequency Oscillator Calibration]$
  98   1      
  99   1              // $[HFO#CN - High Frequency Oscillator Control]
 100   1              /*
 101   1              // IOSCEN (High Frequency Oscillator Enable) = ENABLED (High Frequency
 102   1              //     Oscillator enabled.)
 103   1              */
 104   1              HFO0CN |= HFO0CN_IOSCEN__ENABLED;
 105   1              // [HFO#CN - High Frequency Oscillator Control]$
 106   1      
 107   1              // $[Oscillator Ready]
 108   1              while((HFO0CN & HFO0CN_IFRDY__BMASK) == HFO0CN_IFRDY__NOT_SET);
 109   1              // [Oscillator Ready]$
 110   1      
 111   1      
 112   1      }
 113          
 114          //================================================================================
C51 COMPILER V9.60.0.0   INITDEVICE                                                        10/21/2024 19:09:10 PAGE 3   

 115          // CLOCK_0_enter_DefaultMode_from_RESET
 116          //================================================================================
 117          extern void CLOCK_0_enter_DefaultMode_from_RESET(void) {
 118   1              // $[CLKSEL - Clock Select]
 119   1              /*
 120   1              // CLKDIV (Clock Source Divider) = SYSCLK_DIV_1 (SYSCLK is equal to
 121   1              //     selected clock source divided by 1.)
 122   1              // CLKSL (Clock Source Select) = HFOSC (Clock derived from the internal
 123   1              //     precision High-Frequency Oscillator.)
 124   1              */
 125   1              CLKSEL = CLKSEL_CLKDIV__SYSCLK_DIV_1 | CLKSEL_CLKSL__HFOSC;
 126   1              // Wait for the clock to be ready
 127   1              while((CLKSEL & CLKSEL_CLKRDY__BMASK) != CLKSEL_CLKRDY__SET);
 128   1              // [CLKSEL - Clock Select]$
 129   1      
 130   1      
 131   1      }
 132          
 133          //==============================================================================
 134          // enter_Mode2_from_DefaultMode
 135          //==============================================================================
 136          extern void enter_Mode2_from_DefaultMode(void) {
 137   1              // $[Config Calls]
 138   1              // Save the SFRPAGE
 139   1              uint8_t SFRPAGE_save = SFRPAGE;
 140   1              PORTS_0_enter_Mode2_from_DefaultMode();
 141   1              PORTS_1_enter_Mode2_from_DefaultMode();
 142   1              PBCFG_0_enter_Mode2_from_DefaultMode();
 143   1              TIMER01_0_enter_Mode2_from_DefaultMode();
 144   1              TIMER16_3_enter_Mode2_from_DefaultMode();
 145   1              TIMER_SETUP_0_enter_Mode2_from_DefaultMode();
 146   1              SMBUS_0_enter_Mode2_from_DefaultMode();
 147   1              INTERRUPT_0_enter_Mode2_from_DefaultMode();
 148   1              // Restore the SFRPAGE
 149   1              SFRPAGE = SFRPAGE_save;
 150   1              // [Config Calls]$
 151   1      
 152   1      
 153   1      }
 154          
 155          
 156          //================================================================================
 157          // PORTS_1_enter_Mode2_from_DefaultMode
 158          //================================================================================
 159          extern void PORTS_1_enter_Mode2_from_DefaultMode(void) {
 160   1              // $[P1 - Port 1 Pin Latch]
 161   1              // [P1 - Port 1 Pin Latch]$
 162   1      
 163   1              // $[P1MDOUT - Port 1 Output Mode]
 164   1              /*
 165   1              // B0 (Port 1 Bit 0 Output Mode) = OPEN_DRAIN (P1.0 output is open-
 166   1              //     drain.)
 167   1              // B1 (Port 1 Bit 1 Output Mode) = PUSH_PULL (P1.1 output is push-pull.)
 168   1              // B2 (Port 1 Bit 2 Output Mode) = OPEN_DRAIN (P1.2 output is open-
 169   1              //     drain.)
 170   1              // B3 (Port 1 Bit 3 Output Mode) = OPEN_DRAIN (P1.3 output is open-
 171   1              //     drain.)
 172   1              // B4 (Port 1 Bit 4 Output Mode) = OPEN_DRAIN (P1.4 output is open-
 173   1              //     drain.)
 174   1              // B5 (Port 1 Bit 5 Output Mode) = OPEN_DRAIN (P1.5 output is open-
 175   1              //     drain.)
 176   1              // B6 (Port 1 Bit 6 Output Mode) = OPEN_DRAIN (P1.6 output is open-
 177   1              //     drain.)
C51 COMPILER V9.60.0.0   INITDEVICE                                                        10/21/2024 19:09:10 PAGE 4   

 178   1              // B7 (Port 1 Bit 7 Output Mode) = OPEN_DRAIN (P1.7 output is open-
 179   1              //     drain.)
 180   1              */
 181   1              P1MDOUT = P1MDOUT_B0__OPEN_DRAIN | P1MDOUT_B1__PUSH_PULL | P1MDOUT_B2__OPEN_DRAIN
 182   1                       | P1MDOUT_B3__OPEN_DRAIN | P1MDOUT_B4__OPEN_DRAIN | P1MDOUT_B5__OPEN_DRAIN
 183   1                       | P1MDOUT_B6__OPEN_DRAIN | P1MDOUT_B7__OPEN_DRAIN;
 184   1      
 185   1      
 186   1              //1.4ピンをアナログ入力にする
 187   1              P1MDIN = P1MDIN_B0__DIGITAL | P1MDIN_B1__DIGITAL | P1MDIN_B2__DIGITAL
 188   1                   | P1MDIN_B3__DIGITAL | P1MDIN_B4__ANALOG | P1MDIN_B5__DIGITAL
 189   1                   | P1MDIN_B6__DIGITAL | P1MDIN_B7__DIGITAL;
 190   1              // [P1MDOUT - Port 1 Output Mode]$
 191   1      
 192   1              // $[P1MDIN - Port 1 Input Mode]
 193   1              // [P1MDIN - Port 1 Input Mode]$
 194   1      
 195   1              // $[P1SKIP - Port 1 Skip]
 196   1              /*
 197   1              // B0 (Port 1 Bit 0 Skip) = SKIPPED (P1.0 pin is skipped by the
 198   1              //     crossbar.)
 199   1              // B1 (Port 1 Bit 1 Skip) = SKIPPED (P1.1 pin is skipped by the
 200   1              //     crossbar.)
 201   1              // B2 (Port 1 Bit 2 Skip) = NOT_SKIPPED (P1.2 pin is not skipped by the
 202   1              //     crossbar.)
 203   1              // B3 (Port 1 Bit 3 Skip) = NOT_SKIPPED (P1.3 pin is not skipped by the
 204   1              //     crossbar.)
 205   1              // B4 (Port 1 Bit 4 Skip) = NOT_SKIPPED (P1.4 pin is not skipped by the
 206   1              //     crossbar.)
 207   1              // B5 (Port 1 Bit 5 Skip) = NOT_SKIPPED (P1.5 pin is not skipped by the
 208   1              //     crossbar.)
 209   1              // B6 (Port 1 Bit 6 Skip) = NOT_SKIPPED (P1.6 pin is not skipped by the
 210   1              //     crossbar.)
 211   1              // B7 (Port 1 Bit 7 Skip) = NOT_SKIPPED (P1.7 pin is not skipped by the
 212   1              //     crossbar.)
 213   1              */
 214   1              P1SKIP = P1SKIP_B0__SKIPPED | P1SKIP_B1__SKIPPED | P1SKIP_B2__SKIPPED
 215   1                       | P1SKIP_B3__NOT_SKIPPED | P1SKIP_B4__SKIPPED | P1SKIP_B5__NOT_SKIPPED
 216   1                       | P1SKIP_B6__NOT_SKIPPED | P1SKIP_B7__NOT_SKIPPED;
 217   1              // [P1SKIP - Port 1 Skip]$
 218   1      
 219   1              // $[P1MASK - Port 1 Mask]
 220   1              // [P1MASK - Port 1 Mask]$
 221   1      
 222   1              // $[P1MAT - Port 1 Match]
 223   1              // [P1MAT - Port 1 Match]$
 224   1      
 225   1              // $[P1DRV - Port 1 Drive Strength]
 226   1              // [P1DRV - Port 1 Drive Strength]$
 227   1      
 228   1      
 229   1      }
 230          
 231          //================================================================================
 232          // PBCFG_0_enter_Mode2_from_DefaultMode
 233          //================================================================================
 234          extern void PBCFG_0_enter_Mode2_from_DefaultMode(void) {
 235   1              // $[XBR2 - Port I/O Crossbar 2]
 236   1              /*
 237   1              // WEAKPUD (Port I/O Weak Pullup Disable) = PULL_UPS_ENABLED (Weak
 238   1              //     Pullups enabled (except for Ports whose I/O are configured for analog
 239   1              //     mode).)
 240   1              // XBARE (Crossbar Enable) = ENABLED (Crossbar enabled.)
C51 COMPILER V9.60.0.0   INITDEVICE                                                        10/21/2024 19:09:10 PAGE 5   

 241   1              */
 242   1              XBR2 = XBR2_WEAKPUD__PULL_UPS_ENABLED | XBR2_XBARE__ENABLED;
 243   1              // [XBR2 - Port I/O Crossbar 2]$
 244   1      
 245   1              // $[XBR0 - Port I/O Crossbar 0]
 246   1              /*
 247   1              // URT0E (UART I/O Output Enable) = DISABLED (UART I/O unavailable at
 248   1              //     Port pin.)
 249   1              // SPI0E (SPI I/O Enable) = DISABLED (SPI I/O unavailable at Port pins.)
 250   1              // SMB0E (SMBus0 I/O Enable) = ENABLED (SMBus0 I/O routed to Port pins.)
 251   1              // CP0E (Comparator0 Output Enable) = DISABLED (CP0 unavailable at Port
 252   1              //     pin.)
 253   1              // CP0AE (Comparator0 Asynchronous Output Enable) = DISABLED
 254   1              //     (Asynchronous CP0 unavailable at Port pin.)
 255   1              // SYSCKE (SYSCLK Output Enable) = DISABLED (SYSCLK unavailable at Port
 256   1              //     pin.)
 257   1              */
 258   1              XBR0 = XBR0_URT0E__DISABLED | XBR0_SPI0E__DISABLED | XBR0_SMB0E__ENABLED
 259   1                       | XBR0_CP0E__DISABLED | XBR0_CP0AE__DISABLED | XBR0_SYSCKE__DISABLED;
 260   1              // [XBR0 - Port I/O Crossbar 0]$
 261   1      
 262   1              // $[XBR1 - Port I/O Crossbar 1]
 263   1              // [XBR1 - Port I/O Crossbar 1]$
 264   1      
 265   1      
 266   1      }
 267          
 268          //================================================================================
 269          // TIMER01_0_enter_Mode2_from_DefaultMode
 270          //================================================================================
 271          extern void TIMER01_0_enter_Mode2_from_DefaultMode(void) {
 272   1              // $[Timer Initialization]
 273   1              //Save Timer Configuration
 274   1              uint8_t TCON_save = TCON;
 275   1              //Stop Timers
 276   1              TCON &= TCON_TR0__BMASK & TCON_TR1__BMASK;
 277   1      
 278   1              // [Timer Initialization]$
 279   1      
 280   1              // $[TH0 - Timer 0 High Byte]
 281   1              // [TH0 - Timer 0 High Byte]$
 282   1      
 283   1              // $[TL0 - Timer 0 Low Byte]
 284   1              // [TL0 - Timer 0 Low Byte]$
 285   1      
 286   1              // $[TH1 - Timer 1 High Byte]
 287   1              /*
 288   1              // TH1 (Timer 1 High Byte) = 0xBC
 289   1              */
 290   1              TH1 = (0xBC << TH1_TH1__SHIFT);
 291   1              // [TH1 - Timer 1 High Byte]$
 292   1      
 293   1              // $[TL1 - Timer 1 Low Byte]
 294   1              /*
 295   1              // TL1 (Timer 1 Low Byte) = 0x34
 296   1              */
 297   1              TL1 = (0x34 << TL1_TL1__SHIFT);
 298   1              // [TL1 - Timer 1 Low Byte]$
 299   1      
 300   1              // $[Timer Restoration]
 301   1              //Restore Timer Configuration
 302   1              TCON = TCON_save;
 303   1      
C51 COMPILER V9.60.0.0   INITDEVICE                                                        10/21/2024 19:09:10 PAGE 6   

 304   1              // [Timer Restoration]$
 305   1      
 306   1      
 307   1      }
 308          
 309          //================================================================================
 310          // TIMER16_3_enter_Mode2_from_DefaultMode
 311          //================================================================================
 312          extern void TIMER16_3_enter_Mode2_from_DefaultMode(void) {
 313   1              // $[Timer Initialization]
 314   1              // Save Timer Configuration
 315   1              uint8_t TMR3CN0_TR3_save = TMR3CN0 & TMR3CN0_TR3__BMASK;
 316   1              // Stop Timer
 317   1              TMR3CN0 &= ~(TMR3CN0_TR3__BMASK);
 318   1              // [Timer Initialization]$
 319   1      
 320   1              // $[TMR3CN0 - Timer 3 Control]
 321   1              // [TMR3CN0 - Timer 3 Control]$
 322   1      
 323   1              // $[TMR3H - Timer 3 High Byte]
 324   1              /*
 325   1              // TMR3H (Timer 3 High Byte) = 0x38
 326   1              */
 327   1              TMR3H = (0x38 << TMR3H_TMR3H__SHIFT);
 328   1              // [TMR3H - Timer 3 High Byte]$
 329   1      
 330   1              // $[TMR3L - Timer 3 Low Byte]
 331   1              /*
 332   1              // TMR3L (Timer 3 Low Byte) = 0x9E
 333   1              */
 334   1              TMR3L = (0x9E << TMR3L_TMR3L__SHIFT);
 335   1              // [TMR3L - Timer 3 Low Byte]$
 336   1      
 337   1              // $[TMR3RLH - Timer 3 Reload High Byte]
 338   1              /*
 339   1              // TMR3RLH (Timer 3 Reload High Byte) = 0x38
 340   1              */
 341   1              TMR3RLH = (0x38 << TMR3RLH_TMR3RLH__SHIFT);
 342   1              // [TMR3RLH - Timer 3 Reload High Byte]$
 343   1      
 344   1              // $[TMR3RLL - Timer 3 Reload Low Byte]
 345   1              /*
 346   1              // TMR3RLL (Timer 3 Reload Low Byte) = 0x9E
 347   1              */
 348   1              TMR3RLL = (0x9E << TMR3RLL_TMR3RLL__SHIFT);
 349   1              // [TMR3RLL - Timer 3 Reload Low Byte]$
 350   1      
 351   1              // $[TMR3CN0]
 352   1              /*
 353   1              // TR3 (Timer 3 Run Control) = RUN (Start Timer 3 running.)
 354   1              */
 355   1              TMR3CN0 |= TMR3CN0_TR3__RUN;
 356   1              // [TMR3CN0]$
 357   1      
 358   1              // $[Timer Restoration]
 359   1              // Restore Timer Configuration
 360   1              TMR3CN0 |= TMR3CN0_TR3_save;
 361   1              // [Timer Restoration]$
 362   1      
 363   1      
 364   1      }
 365          
 366          //================================================================================
C51 COMPILER V9.60.0.0   INITDEVICE                                                        10/21/2024 19:09:10 PAGE 7   

 367          // TIMER_SETUP_0_enter_Mode2_from_DefaultMode
 368          //================================================================================
 369          extern void TIMER_SETUP_0_enter_Mode2_from_DefaultMode(void) {
 370   1              // $[CKCON0 - Clock Control 0]
 371   1              // [CKCON0 - Clock Control 0]$
 372   1      
 373   1              // $[TMOD - Timer 0/1 Mode]
 374   1              /*
 375   1              // T0M (Timer 0 Mode Select) = MODE0 (Mode 0, 13-bit Counter/Timer)
 376   1              // T1M (Timer 1 Mode Select) = MODE2 (Mode 2, 8-bit Counter/Timer with
 377   1              //     Auto-Reload)
 378   1              // CT0 (Counter/Timer 0 Select) = TIMER (Timer Mode. Timer 0 increments
 379   1              //     on the clock defined by T0M in the CKCON register.)
 380   1              // GATE0 (Timer 0 Gate Control) = DISABLED (Timer 0 enabled when TR0 = 1
 381   1              //     irrespective of INT0 logic level.)
 382   1              // CT1 (Counter/Timer 1 Select) = TIMER (Timer Mode. Timer 1 increments
 383   1              //     on the clock defined by T1M in the CKCON register.)
 384   1              // GATE1 (Timer 1 Gate Control) = DISABLED (Timer 1 enabled when TR1 = 1
 385   1              //     irrespective of INT1 logic level.)
 386   1              */
 387   1              TMOD = TMOD_T0M__MODE0 | TMOD_T1M__MODE2 | TMOD_CT0__TIMER | TMOD_GATE0__DISABLED
 388   1                       | TMOD_CT1__TIMER | TMOD_GATE1__DISABLED;
 389   1              // [TMOD - Timer 0/1 Mode]$
 390   1      
 391   1              // $[TCON - Timer 0/1 Control]
 392   1              /*
 393   1              // TR1 (Timer 1 Run Control) = RUN (Start Timer 1 running.)
 394   1              */
 395   1              TCON |= TCON_TR1__RUN;
 396   1              // [TCON - Timer 0/1 Control]$
 397   1      
 398   1      
 399   1      }
 400          
 401          //================================================================================
 402          // SMBUS_0_enter_Mode2_from_DefaultMode
 403          //================================================================================
 404          extern void SMBUS_0_enter_Mode2_from_DefaultMode(void) {
 405   1              // $[SMB0ADR - SMBus 0 Slave Address]
 406   1              // [SMB0ADR - SMBus 0 Slave Address]$
 407   1      
 408   1              // $[SMB0ADM - SMBus 0 Slave Address Mask]
 409   1              // [SMB0ADM - SMBus 0 Slave Address Mask]$
 410   1      
 411   1              // $[SMB0CF - SMBus 0 Configuration]
 412   1              /*
 413   1              // SMBCS (SMBus Clock Source Selection) = TIMER1 (Timer 1 Overflow.)
 414   1              // ENSMB (SMBus Enable) = ENABLED (Enable the SMBus module.)
 415   1              // SMBFTE (SMBus Free Timeout Detection Enable) = FREE_TO_ENABLED (Enable
 416   1              //     bus free timeouts. The bus the bus will be considered free if SCL and
 417   1              //     SDA remain high for more than 10 SMBus clock source periods.)
 418   1              // SMBTOE (SMBus SCL Timeout Detection Enable) = SCL_TO_ENABLED (Enable
 419   1              //     SCL low timeouts.)
 420   1              // EXTHOLD (SMBus Setup and Hold Time Extension Enable) = ENABLED (Enable
 421   1              //     SDA extended setup and hold times.)
 422   1              // INH (SMBus Slave Inhibit) = SLAVE_DISABLED (Slave states are
 423   1              //     inhibited.)
 424   1              */
 425   1              SMB0CF &= ~SMB0CF_SMBCS__FMASK;
 426   1              SMB0CF |= SMB0CF_SMBCS__TIMER1
 427   1                       | SMB0CF_ENSMB__ENABLED | SMB0CF_SMBFTE__FREE_TO_ENABLED | SMB0CF_SMBTOE__SCL_TO_ENABLED
 428   1                       | SMB0CF_EXTHOLD__ENABLED | SMB0CF_INH__SLAVE_DISABLED;
 429   1              // [SMB0CF - SMBus 0 Configuration]$
C51 COMPILER V9.60.0.0   INITDEVICE                                                        10/21/2024 19:09:10 PAGE 8   

 430   1      
 431   1      
 432   1      }
 433          
 434          //================================================================================
 435          // INTERRUPT_0_enter_Mode2_from_DefaultMode
 436          //================================================================================
 437          extern void INTERRUPT_0_enter_Mode2_from_DefaultMode(void) {
 438   1              // $[EIE1 - Extended Interrupt Enable 1]
 439   1              /*
 440   1              // EADC0 (ADC0 Conversion Complete Interrupt Enable) = DISABLED (Disable
 441   1              //     ADC0 Conversion Complete interrupt.)
 442   1              // ECP0 (Comparator0 (CP0) Interrupt Enable) = DISABLED (Disable CP0
 443   1              //     interrupts.)
 444   1              // EPCA0 (Programmable Counter Array (PCA0) Interrupt Enable) = DISABLED
 445   1              //     (Disable all PCA0 interrupts.)
 446   1              // ERTC0A (RTC Alarm Interrupt Enable) = DISABLED (Disable RTC Alarm
 447   1              //     interrupts.)
 448   1              // ESMB0 (SMBus (SMB0) Interrupt Enable) = ENABLED (Enable interrupt
 449   1              //     requests generated by SMB0.)
 450   1              // ET3 (Timer 3 Interrupt Enable) = ENABLED (Enable interrupt requests
 451   1              //     generated by the TF3L or TF3H flags.)
 452   1              // EWADC0 (Window Comparison ADC0 Interrupt Enable) = DISABLED (Disable
 453   1              //     ADC0 Window Comparison interrupt.)
 454   1              */
 455   1              EIE1 = EIE1_EADC0__DISABLED | EIE1_ECP0__DISABLED | EIE1_EPCA0__DISABLED
 456   1                       | EIE1_ERTC0A__DISABLED | EIE1_ESMB0__ENABLED | EIE1_ET3__ENABLED
 457   1                       | EIE1_EWADC0__DISABLED;
 458   1              // [EIE1 - Extended Interrupt Enable 1]$
 459   1      
 460   1              // $[EIP1 - Extended Interrupt Priority 1]
 461   1              // [EIP1 - Extended Interrupt Priority 1]$
 462   1      
 463   1              // $[IE - Interrupt Enable]
 464   1              /*
 465   1              // EA (All Interrupts Enable) = ENABLED (Enable each interrupt according
 466   1              //     to its individual mask setting.)
 467   1              // EX0 (External Interrupt 0 Enable) = DISABLED (Disable external
 468   1              //     interrupt 0.)
 469   1              // EX1 (External Interrupt 1 Enable) = DISABLED (Disable external
 470   1              //     interrupt 1.)
 471   1              // ESPI0 (SPI0 Interrupt Enable) = DISABLED (Disable all SPI0
 472   1              //     interrupts.)
 473   1              // ET0 (Timer 0 Interrupt Enable) = DISABLED (Disable all Timer 0
 474   1              //     interrupt.)
 475   1              // ET1 (Timer 1 Interrupt Enable) = DISABLED (Disable all Timer 1
 476   1              //     interrupt.)
 477   1              // ET2 (Timer 2 Interrupt Enable) = DISABLED (Disable Timer 2 interrupt.)
 478   1              // ES0 (UART0 Interrupt Enable) = DISABLED (Disable UART0 interrupt.)
 479   1              */
 480   1              IE = IE_EA__ENABLED | IE_EX0__DISABLED | IE_EX1__DISABLED | IE_ESPI0__DISABLED
 481   1                       | IE_ET0__DISABLED | IE_ET1__DISABLED | IE_ET2__DISABLED | IE_ES0__DISABLED;
 482   1              // [IE - Interrupt Enable]$
 483   1      
 484   1              // $[IP - Interrupt Priority]
 485   1              // [IP - Interrupt Priority]$
 486   1      
 487   1              // $[EIE2 - Extended Interrupt Enable 2]
 488   1              // [EIE2 - Extended Interrupt Enable 2]$
 489   1      
 490   1              // $[EIP2 - Extended Interrupt Priority 2]
 491   1              // [EIP2 - Extended Interrupt Priority 2]$
 492   1      
C51 COMPILER V9.60.0.0   INITDEVICE                                                        10/21/2024 19:09:10 PAGE 9   

 493   1      
 494   1      }
 495          
 496          
 497          extern void PORTS_0_enter_Mode2_from_DefaultMode(void) {
 498   1              // $[P0 - Port 0 Pin Latch]
 499   1              // [P0 - Port 0 Pin Latch]$
 500   1      
 501   1              // $[P0MDOUT - Port 0 Output Mode]
 502   1              // [P0MDOUT - Port 0 Output Mode]$
 503   1      
 504   1              // $[P0MDIN - Port 0 Input Mode]
 505   1              // [P0MDIN - Port 0 Input Mode]$
 506   1      
 507   1              // $[P0SKIP - Port 0 Skip]
 508   1              /*
 509   1              // B0 (Port 0 Bit 0 Skip) = SKIPPED (P0.0 pin is skipped by the
 510   1              //     crossbar.)
 511   1              // B1 (Port 0 Bit 1 Skip) = SKIPPED (P0.1 pin is skipped by the
 512   1              //     crossbar.)
 513   1              // B2 (Port 0 Bit 2 Skip) = SKIPPED (P0.2 pin is skipped by the
 514   1              //     crossbar.)
 515   1              // B3 (Port 0 Bit 3 Skip) = SKIPPED (P0.3 pin is skipped by the
 516   1              //     crossbar.)
 517   1              // B4 (Port 0 Bit 4 Skip) = SKIPPED (P0.4 pin is skipped by the
 518   1              //     crossbar.)
 519   1              // B5 (Port 0 Bit 5 Skip) = SKIPPED (P0.5 pin is skipped by the
 520   1              //     crossbar.)
 521   1              // B6 (Port 0 Bit 6 Skip) = SKIPPED (P0.6 pin is skipped by the
 522   1              //     crossbar.)
 523   1              // B7 (Port 0 Bit 7 Skip) = SKIPPED (P0.7 pin is skipped by the
 524   1              //     crossbar.)
 525   1              */
 526   1              SFRPAGE = 0x00;
 527   1              P0SKIP = P0SKIP_B0__SKIPPED | P0SKIP_B1__SKIPPED | P0SKIP_B2__SKIPPED
 528   1                       | P0SKIP_B3__NOT_SKIPPED | P0SKIP_B4__NOT_SKIPPED | P0SKIP_B5__SKIPPED
 529   1                       | P0SKIP_B6__SKIPPED | P0SKIP_B7__SKIPPED;
 530   1              // [P0SKIP - Port 0 Skip]$
 531   1      
 532   1              // $[P0MASK - Port 0 Mask]
 533   1              // [P0MASK - Port 0 Mask]$  P1SKIP_B3__NOT_SKIPPED
 534   1      
 535   1              // $[P0MAT - Port 0 Match]
 536   1              // [P0MAT - Port 0 Match]$
 537   1      
 538   1              // $[P0DRV - Port 0 Drive Strength]
 539   1              // [P0DRV - Port 0 Drive Strength]$
 540   1      
 541   1      
 542   1      }
 543          
 544          
 545          
 546          
 547          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    169    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       2
C51 COMPILER V9.60.0.0   INITDEVICE                                                        10/21/2024 19:09:10 PAGE 10  

   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
